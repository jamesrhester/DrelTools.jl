#
#   Auto-generated. If changed, rerun deps/build.jl .
#
const _drel_grammar_spec = raw"""
    
    LEFTPAREN : "("
    RIGHTPAREN : ")"
    LEFTBRACE : "{"
    RIGHTBRACE : "}"
    LSQUAREB : "["
    RSQUAREB : "]"
    COMMA : ","
    COLON : ":"
    SEMI : ";"
    DOUBLECOLON : "::"
    PERIOD : "."
    PWR : "**"
    MULT : "*"
    DIV : "/"
    CROSS : "^"
    PLUS : "+"
    MINUS : "-"
    ISEQUAL : "=="
    NEQ : "!="
    GTE : ">=" 
    LTE : "<="
    GT : ">"
    LT : "<"
    BADOR : "||"
    BADAND : "&&"
    
    EQUALS : "="
    APPEND : "++="
    AUGADD : "+="
    AUGMIN : "-="
    AUGMUL : "*="
    AUGDROP : "--=" 
    
    augop : APPEND | AUGADD | AUGMIN | AUGDROP | AUGMUL | EQUALS 

    
    INTEGER : /[0-9]+/
    OCTINT : /0o[0-7]+/
    HEXINT : /0x[0-9A-Fa-f]+/
    BININT : /0b[0-1]+/
    MISSING : "?"
    NULL : "NULL"
    
    real : ((INTEGER PERIOD [INTEGER])|(PERIOD INTEGER))[("E"|"e"i) [PLUS|MINUS] INTEGER ]
    
    imaginary : (real | INTEGER) ("j"i|"J")
    LONGSTRING : /'''(''[^']|'[^']|[^'])*'''|\"\"\"(\"\"[^\"]|\"[^\"]|[^\"])*\"\"\"/
    SHORTSTRING : /'[^'\n]*'|"[^"\n]*"/
    AND : "and"i
    OR : "or"i
    IN : "in"i
    NOT : "not"i
    DO : "do"i
    FOR : "for"i
    LOOP : "loop"i
    AS : "as"i
    WITH : "with"i
    WHERE : "where"i
    ELSE : "else"i
    ELSEIF : /"else if"|"elseif"i/
    NEXT : "next"i
    BREAK : "break"i
    IF : "if"i
    FUNCTION : "function"i
    REPEAT : "repeat"i
    ID : /[A-Za-z_][A-Za-z0-9_$]*/
    COMMENT : /#.*/
    %ignore COMMENT
    WHITESPACE : /[ \t\r\n]+/
    %ignore WHITESPACE
    
    literal : SHORTSTRING | LONGSTRING | INTEGER | HEXINT | OCTINT | BININT | NULL | MISSING | real | imaginary 
    
    ident : ID 
    nspace : ID DOUBLECOLON 
    nident : [ nspace ] ident 
    
    enclosure : parenth_form | list_display | table_display 
    parenth_form : LEFTPAREN ( expression ) RIGHTPAREN 
    
    list_display : LSQUAREB  [ expression_list ] RSQUAREB 
    expression_list : expression ( COMMA expression )*
    
    table_display : LEFTBRACE [ table_contents ] RIGHTBRACE 
    table_contents : table_entry ( COMMA table_entry )* 
    table_entry : SHORTSTRING  COLON  expression
    assignable : nident | subscription | attributeref
    assignable_list : assignable ( COMMA assignable )*

    att_primary : assignable | call 
?primary : att_primary | literal | enclosure 
    attributeref : att_primary PERIOD  ( ID | INTEGER )  
    subscription : primary  LSQUAREB  (proper_slice | slice_list | dotlist)  RSQUAREB 
    dotlist :  dotlist_element ("," dotlist_element )* 
    dotlist_element : ("."  ident  "="  expression)
    
    proper_slice : short_slice | long_slice
    short_slice : COLON | (expression  COLON  expression) | (COLON expression) | (expression  COLON) 
    long_slice : short_slice  COLON  expression 
    slice_list : (expression | proper_slice) ( COMMA (expression | proper_slice) )* 
    
    call : nident  LEFTPAREN [expression_list] RIGHTPAREN 
?power : primary  [ PWR  factor ] 
    
?factor : power |  (PLUS|MINUS)  factor  
?term : factor | (term (MULT|DIV|CROSS) factor ) 
?arith : term | ( arith ( PLUS | MINUS ) term ) 
    restricted_comp_operator : GT | LT | GTE | LTE | NEQ | ISEQUAL 
    comp_operator : restricted_comp_operator | IN | (NOT IN) 
?comparison : arith | (comparison  comp_operator  arith ) 
?not_test : comparison | (NOT  not_test) 
?and_test : not_test  (  (AND | BADAND )  not_test )* 
?or_test  : and_test  ( (OR | BADOR )  and_test )* 
    expression : or_test 
    statements : statement | (statements statement) 
    statement : simple_statement | compound_statement 
    simple_statement : small_statement ( ";"  small_statement )* 
    small_statement : assignment | dotlist_assign | BREAK | NEXT 
    assignment :  lhs augop rhs 
    lhs : assignable_list 
    rhs : expression_list 
    dotlist_assign : nident "("  dotlist  ")" 
    
    compound_statement : if_stmt | for_stmt | do_stmt | loop_stmt
                         | with_stmt | repeat_stmt | funcdef 
    suite : statement | "{" statements "}" 
    
    if_stmt : IF "(" expression ")" suite (else_if_stmt)* [else_stmt]
    else_stmt : ELSE  suite 
    else_if_stmt : ELSEIF  "("  expression  ")" suite 
    for_stmt : FOR  (id_list | LSQUAREB id_list RSQUAREB )  IN  expression_list  suite 
    id_list : ident ( COMMA ident )* 
    
    loop_stmt :  LOOP ident AS nident [ COLON  ident  [restricted_comp_operator  ident]] suite 
    do_stmt : DO ident  "=" expression  ","  expression  [","  expression] suite 
    repeat_stmt : REPEAT suite 
    with_stmt : WITH  ident  AS  nident  suite 
    funcdef : FUNCTION  ident  "("  arglist  ")"  suite 
    arglist : one_arg ( COMMA one_arg)* 
    one_arg : ident  ":"  "["  ident  ","  ident  "]" 
    input : statements 

"""
